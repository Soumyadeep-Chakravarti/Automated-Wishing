[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "build",
        "importPath": "googleapiclient.discovery",
        "description": "googleapiclient.discovery",
        "isExtraImport": true,
        "detail": "googleapiclient.discovery",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "google.auth.transport.requests",
        "description": "google.auth.transport.requests",
        "isExtraImport": true,
        "detail": "google.auth.transport.requests",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.credentials",
        "description": "google.oauth2.credentials",
        "isExtraImport": true,
        "detail": "google.oauth2.credentials",
        "documentation": {}
    },
    {
        "label": "InstalledAppFlow",
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "isExtraImport": true,
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "InstalledAppFlow",
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "isExtraImport": true,
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "InstalledAppFlow",
        "importPath": "google_auth_oauthlib.flow",
        "description": "google_auth_oauthlib.flow",
        "isExtraImport": true,
        "detail": "google_auth_oauthlib.flow",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "HttpError",
        "importPath": "googleapiclient.errors",
        "description": "googleapiclient.errors",
        "isExtraImport": true,
        "detail": "googleapiclient.errors",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "pywhatkit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pywhatkit",
        "description": "pywhatkit",
        "detail": "pywhatkit",
        "documentation": {}
    },
    {
        "label": "ContactFileNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventFileNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "PhoneNumberNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "handle_exception",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "TokenFileNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "ContactFileNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventFileNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "InvalidEventFormatError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "PhoneNumberNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "MessageAlreadySentError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "WhatsAppMessageFailedError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventNotFoundError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "MissingCredentialsError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventAlreadyScheduledError",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "handle_exception",
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "isExtraImport": true,
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "CustomError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class CustomError(Exception):\n    pass\nclass TokenFileNotFoundError(CustomError):\n    def __init__(self, message=\"Token file not found. Run the authentication script first.\"):\n        self.message = message\n        super().__init__(self.message)\nclass ContactFileNotFoundError(CustomError):\n    def __init__(self, message=\"Contacts file not found. Ensure you have fetched contacts first.\"):\n        self.message = message\n        super().__init__(self.message)",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "TokenFileNotFoundError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class TokenFileNotFoundError(CustomError):\n    def __init__(self, message=\"Token file not found. Run the authentication script first.\"):\n        self.message = message\n        super().__init__(self.message)\nclass ContactFileNotFoundError(CustomError):\n    def __init__(self, message=\"Contacts file not found. Ensure you have fetched contacts first.\"):\n        self.message = message\n        super().__init__(self.message)\nclass EventFileNotFoundError(CustomError):\n    def __init__(self, message=\"Events file not found. Ensure you have fetched events first.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "ContactFileNotFoundError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class ContactFileNotFoundError(CustomError):\n    def __init__(self, message=\"Contacts file not found. Ensure you have fetched contacts first.\"):\n        self.message = message\n        super().__init__(self.message)\nclass EventFileNotFoundError(CustomError):\n    def __init__(self, message=\"Events file not found. Ensure you have fetched events first.\"):\n        self.message = message\n        super().__init__(self.message)\nclass InvalidEventFormatError(CustomError):\n    def __init__(self, message=\"Event data has an invalid format or missing necessary fields.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventFileNotFoundError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class EventFileNotFoundError(CustomError):\n    def __init__(self, message=\"Events file not found. Ensure you have fetched events first.\"):\n        self.message = message\n        super().__init__(self.message)\nclass InvalidEventFormatError(CustomError):\n    def __init__(self, message=\"Event data has an invalid format or missing necessary fields.\"):\n        self.message = message\n        super().__init__(self.message)\nclass PhoneNumberNotFoundError(CustomError):\n    def __init__(self, message=\"Phone number not found for the contact.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "InvalidEventFormatError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class InvalidEventFormatError(CustomError):\n    def __init__(self, message=\"Event data has an invalid format or missing necessary fields.\"):\n        self.message = message\n        super().__init__(self.message)\nclass PhoneNumberNotFoundError(CustomError):\n    def __init__(self, message=\"Phone number not found for the contact.\"):\n        self.message = message\n        super().__init__(self.message)\nclass MessageAlreadySentError(CustomError):\n    def __init__(self, message=\"Message has already been sent for this event.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "PhoneNumberNotFoundError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class PhoneNumberNotFoundError(CustomError):\n    def __init__(self, message=\"Phone number not found for the contact.\"):\n        self.message = message\n        super().__init__(self.message)\nclass MessageAlreadySentError(CustomError):\n    def __init__(self, message=\"Message has already been sent for this event.\"):\n        self.message = message\n        super().__init__(self.message)\nclass WhatsAppMessageFailedError(CustomError):\n    def __init__(self, message=\"Failed to send WhatsApp message.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "MessageAlreadySentError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class MessageAlreadySentError(CustomError):\n    def __init__(self, message=\"Message has already been sent for this event.\"):\n        self.message = message\n        super().__init__(self.message)\nclass WhatsAppMessageFailedError(CustomError):\n    def __init__(self, message=\"Failed to send WhatsApp message.\"):\n        self.message = message\n        super().__init__(self.message)\nclass EventNotFoundError(CustomError):\n    def __init__(self, message=\"No events found for the specified date or calendar.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "WhatsAppMessageFailedError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class WhatsAppMessageFailedError(CustomError):\n    def __init__(self, message=\"Failed to send WhatsApp message.\"):\n        self.message = message\n        super().__init__(self.message)\nclass EventNotFoundError(CustomError):\n    def __init__(self, message=\"No events found for the specified date or calendar.\"):\n        self.message = message\n        super().__init__(self.message)\nclass MissingCredentialsError(CustomError):\n    def __init__(self, message=\"Missing credentials for API access.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventNotFoundError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class EventNotFoundError(CustomError):\n    def __init__(self, message=\"No events found for the specified date or calendar.\"):\n        self.message = message\n        super().__init__(self.message)\nclass MissingCredentialsError(CustomError):\n    def __init__(self, message=\"Missing credentials for API access.\"):\n        self.message = message\n        super().__init__(self.message)\nclass EventAlreadyScheduledError(CustomError):\n    def __init__(self, message=\"Event is already scheduled for sending.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "MissingCredentialsError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class MissingCredentialsError(CustomError):\n    def __init__(self, message=\"Missing credentials for API access.\"):\n        self.message = message\n        super().__init__(self.message)\nclass EventAlreadyScheduledError(CustomError):\n    def __init__(self, message=\"Event is already scheduled for sending.\"):\n        self.message = message\n        super().__init__(self.message)\nclass PhoneNumberNotFoundError(CustomError):\n    def __init__(self, message=\"Phone number not found for the contact.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "EventAlreadyScheduledError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class EventAlreadyScheduledError(CustomError):\n    def __init__(self, message=\"Event is already scheduled for sending.\"):\n        self.message = message\n        super().__init__(self.message)\nclass PhoneNumberNotFoundError(CustomError):\n    def __init__(self, message=\"Phone number not found for the contact.\"):\n        self.message = message\n        super().__init__(self.message)\n# Function to load error handlers from a file\ndef load_error_handlers():",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "PhoneNumberNotFoundError",
        "kind": 6,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "class PhoneNumberNotFoundError(CustomError):\n    def __init__(self, message=\"Phone number not found for the contact.\"):\n        self.message = message\n        super().__init__(self.message)\n# Function to load error handlers from a file\ndef load_error_handlers():\n    if not os.path.exists(ERROR_HANDLERS_FILE):\n        return {}\n    with open(ERROR_HANDLERS_FILE, \"r\") as file:\n        return json.load(file)",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "load_error_handlers",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def load_error_handlers():\n    if not os.path.exists(ERROR_HANDLERS_FILE):\n        return {}\n    with open(ERROR_HANDLERS_FILE, \"r\") as file:\n        return json.load(file)\n# Function to store custom error handlers in a file\ndef save_error_handlers(error_handlers):\n    with open(ERROR_HANDLERS_FILE, \"w\") as file:\n        json.dump(error_handlers, file, indent=4)\n# Default error handlers for specific error types",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "save_error_handlers",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def save_error_handlers(error_handlers):\n    with open(ERROR_HANDLERS_FILE, \"w\") as file:\n        json.dump(error_handlers, file, indent=4)\n# Default error handlers for specific error types\ndef handle_file_not_found_error(error_details):\n    print(f\"Handling FileNotFoundError: {error_details['message']}\")\ndef handle_network_error(error_details):\n    print(f\"Handling NetworkError: {error_details['message']}\")\ndef handle_database_error(error_details):\n    print(f\"Handling DatabaseError: {error_details['message']}\")",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "handle_file_not_found_error",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def handle_file_not_found_error(error_details):\n    print(f\"Handling FileNotFoundError: {error_details['message']}\")\ndef handle_network_error(error_details):\n    print(f\"Handling NetworkError: {error_details['message']}\")\ndef handle_database_error(error_details):\n    print(f\"Handling DatabaseError: {error_details['message']}\")\n# Function to add a new custom error handler to the system\ndef add_error_handler(error_type, handler_method):\n    error_handlers = load_error_handlers()\n    if error_type not in error_handlers:",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "handle_network_error",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def handle_network_error(error_details):\n    print(f\"Handling NetworkError: {error_details['message']}\")\ndef handle_database_error(error_details):\n    print(f\"Handling DatabaseError: {error_details['message']}\")\n# Function to add a new custom error handler to the system\ndef add_error_handler(error_type, handler_method):\n    error_handlers = load_error_handlers()\n    if error_type not in error_handlers:\n        if callable(handler_method):\n            error_handlers[error_type] = handler_method.__name__",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "handle_database_error",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def handle_database_error(error_details):\n    print(f\"Handling DatabaseError: {error_details['message']}\")\n# Function to add a new custom error handler to the system\ndef add_error_handler(error_type, handler_method):\n    error_handlers = load_error_handlers()\n    if error_type not in error_handlers:\n        if callable(handler_method):\n            error_handlers[error_type] = handler_method.__name__\n            save_error_handlers(error_handlers)\n            print(f\"Handler for {error_type} added successfully.\")",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "add_error_handler",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def add_error_handler(error_type, handler_method):\n    error_handlers = load_error_handlers()\n    if error_type not in error_handlers:\n        if callable(handler_method):\n            error_handlers[error_type] = handler_method.__name__\n            save_error_handlers(error_handlers)\n            print(f\"Handler for {error_type} added successfully.\")\n        else:\n            print(f\"{handler_method} is not callable.\")\n    else:",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "call_error_handler",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def call_error_handler(error_type, error_details):\n    error_handlers = load_error_handlers()\n    if error_type in error_handlers:\n        handler_method_name = error_handlers[error_type]\n        handler_method = globals().get(handler_method_name)\n        if handler_method:\n            handler_method(error_details)\n        else:\n            print(f\"Handler method for {error_type} not found.\")\n    else:",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "handle_exception",
        "kind": 2,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "def handle_exception(e):\n    # Log the error details\n    timestamp = datetime.datetime.now().isoformat()\n    error_details = {\n        \"message\": str(e),\n        \"timestamp\": timestamp,\n        \"type\": type(e).__name__\n    }\n    # Load the error handlers\n    error_handlers = load_error_handlers()",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "ERROR_HANDLERS_FILE",
        "kind": 5,
        "importPath": "ErrorHandlers",
        "description": "ErrorHandlers",
        "peekOfCode": "ERROR_HANDLERS_FILE = \"error_handlers.json\"\n# Base class for custom exceptions\nclass CustomError(Exception):\n    pass\nclass TokenFileNotFoundError(CustomError):\n    def __init__(self, message=\"Token file not found. Run the authentication script first.\"):\n        self.message = message\n        super().__init__(self.message)\nclass ContactFileNotFoundError(CustomError):\n    def __init__(self, message=\"Contacts file not found. Ensure you have fetched contacts first.\"):",
        "detail": "ErrorHandlers",
        "documentation": {}
    },
    {
        "label": "get_google_contacts",
        "kind": 2,
        "importPath": "GetContacts",
        "description": "GetContacts",
        "peekOfCode": "def get_google_contacts():\n    SCOPES = ['https://www.googleapis.com/auth/contacts.readonly']\n    token_path = 'token.pickle'\n    # Load the token file\n    if not os.path.exists(token_path):\n        raise FileNotFoundError(\"Token file not found. Run the authentication script first.\")\n    with open(token_path, 'rb') as token:\n        creds = pickle.load(token)\n    # Build the service\n    service = build('people', 'v1', credentials=creds)",
        "detail": "GetContacts",
        "documentation": {}
    },
    {
        "label": "save_contacts_to_json",
        "kind": 2,
        "importPath": "GetContacts",
        "description": "GetContacts",
        "peekOfCode": "def save_contacts_to_json(contacts, filename=\"contacts.json\"):\n    with open(filename, \"w\") as file:\n        json.dump(contacts, file, indent=4)\n    print(f\"Contacts saved to {filename}\")\nif __name__ == \"__main__\":\n    try:\n        contacts = get_google_contacts()\n        if contacts:\n            save_contacts_to_json(contacts)\n        else:",
        "detail": "GetContacts",
        "documentation": {}
    },
    {
        "label": "load_contacts",
        "kind": 2,
        "importPath": "GetEvents",
        "description": "GetEvents",
        "peekOfCode": "def load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(\"Contacts file not found. Ensure you have fetched contacts first.\")\n        return {}\n# Function to fetch today's events from the primary calendar\ndef get_todays_calendar_events():\n    # Load credentials",
        "detail": "GetEvents",
        "documentation": {}
    },
    {
        "label": "get_todays_calendar_events",
        "kind": 2,
        "importPath": "GetEvents",
        "description": "GetEvents",
        "peekOfCode": "def get_todays_calendar_events():\n    # Load credentials\n    creds = None\n    if os.path.exists(\"token.json\"):\n        creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(",
        "detail": "GetEvents",
        "documentation": {}
    },
    {
        "label": "save_events_to_json",
        "kind": 2,
        "importPath": "GetEvents",
        "description": "GetEvents",
        "peekOfCode": "def save_events_to_json(events, filename=\"calendar_events.json\"):\n    with open(filename, \"w\") as file:\n        json.dump(events, file, indent=4)\n    print(f\"Events saved to {filename}\")\n# Main execution\nif __name__ == \"__main__\":\n    # Load contacts\n    contacts = load_contacts()\n    if not contacts:\n        exit(\"No contacts loaded. Exiting.\")",
        "detail": "GetEvents",
        "documentation": {}
    },
    {
        "label": "SCOPES",
        "kind": 5,
        "importPath": "GetEvents",
        "description": "GetEvents",
        "peekOfCode": "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n# Function to load contacts from a JSON file\ndef load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(\"Contacts file not found. Ensure you have fetched contacts first.\")\n        return {}\n# Function to fetch today's events from the primary calendar",
        "detail": "GetEvents",
        "documentation": {}
    },
    {
        "label": "authenticate_google",
        "kind": 2,
        "importPath": "GoggleAuth",
        "description": "GoggleAuth",
        "peekOfCode": "def authenticate_google():\n    creds = None\n    token_path = 'token.pickle'\n    # Check if token already exists\n    if os.path.exists(token_path):\n        with open(token_path, 'rb') as token:\n            creds = pickle.load(token)\n    # If no valid credentials, perform login\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:",
        "detail": "GoggleAuth",
        "documentation": {}
    },
    {
        "label": "SCOPES",
        "kind": 5,
        "importPath": "GoggleAuth",
        "description": "GoggleAuth",
        "peekOfCode": "SCOPES = ['https://www.googleapis.com/auth/contacts.readonly']\ndef authenticate_google():\n    creds = None\n    token_path = 'token.pickle'\n    # Check if token already exists\n    if os.path.exists(token_path):\n        with open(token_path, 'rb') as token:\n            creds = pickle.load(token)\n    # If no valid credentials, perform login\n    if not creds or not creds.valid:",
        "detail": "GoggleAuth",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "quickstart",
        "description": "quickstart",
        "peekOfCode": "def main():\n  \"\"\"Shows basic usage of the Google Calendar API.\n  Prints the start and name of the next 10 events on the user's calendar.\n  \"\"\"\n  creds = None\n  # The file token.json stores the user's access and refresh tokens, and is\n  # created automatically when the authorization flow completes for the first\n  # time.\n  if os.path.exists(\"token.json\"):\n    creds = Credentials.from_authorized_user_file(\"token.json\", SCOPES)",
        "detail": "quickstart",
        "documentation": {}
    },
    {
        "label": "SCOPES",
        "kind": 5,
        "importPath": "quickstart",
        "description": "quickstart",
        "peekOfCode": "SCOPES = [\"https://www.googleapis.com/auth/calendar.readonly\"]\ndef main():\n  \"\"\"Shows basic usage of the Google Calendar API.\n  Prints the start and name of the next 10 events on the user's calendar.\n  \"\"\"\n  creds = None\n  # The file token.json stores the user's access and refresh tokens, and is\n  # created automatically when the authorization flow completes for the first\n  # time.\n  if os.path.exists(\"token.json\"):",
        "detail": "quickstart",
        "documentation": {}
    },
    {
        "label": "load_contacts",
        "kind": 2,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "def load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        raise ContactFileNotFoundError()\ndef load_sent_messages():\n    if os.path.exists(SENT_MESSAGES_FILE):\n        with open(SENT_MESSAGES_FILE, \"r\") as file:\n            return json.load(file)",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "load_sent_messages",
        "kind": 2,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "def load_sent_messages():\n    if os.path.exists(SENT_MESSAGES_FILE):\n        with open(SENT_MESSAGES_FILE, \"r\") as file:\n            return json.load(file)\n    return {}\ndef load_calendar_events():\n    try:\n        with open(EVENTS_FILE, \"r\") as file:\n            events = json.load(file)\n            return events",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "load_calendar_events",
        "kind": 2,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "def load_calendar_events():\n    try:\n        with open(EVENTS_FILE, \"r\") as file:\n            events = json.load(file)\n            return events\n    except FileNotFoundError:\n        raise EventFileNotFoundError()\ndef send_message(contact_name, event_summary, recipient_phone_number):\n    try:\n        # Check if the contact has a phone number",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "def send_message(contact_name, event_summary, recipient_phone_number):\n    try:\n        # Check if the contact has a phone number\n        if not recipient_phone_number:\n            raise PhoneNumberNotFoundError()\n        body = f\"Hello {contact_name},\\n\\nThis is a reminder for your event: {event_summary}. Don't forget to check your calendar.\\n\\nBest regards,\\nAutomatic Wishing Bot\"\n        # Get the current time (now) in the local timezone (use pytz for time zone handling)\n        timezone = pytz.timezone(\"UTC\")\n        now = datetime.datetime.now(timezone)\n        hour = now.hour",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "messaging_logic",
        "kind": 2,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "def messaging_logic():\n    try:\n        contacts = load_contacts()\n        if not contacts:\n            raise ContactFileNotFoundError(\"No contacts found.\")\n        sent_messages = load_sent_messages()\n        events = load_calendar_events()\n        if not events:\n            raise EventNotFoundError(\"No events found.\")\n        for event in events:",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "ERROR_LOG_FILE",
        "kind": 5,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "ERROR_LOG_FILE = \"error_log.json\"\nSENT_MESSAGES_FILE = \"sent_messages.json\"\nEVENTS_FILE = \"calendar_events.json\"\n# Set up basic logging configuration for both console and file output\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n# Load contacts, sent messages, and calendar events\ndef load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "SENT_MESSAGES_FILE",
        "kind": 5,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "SENT_MESSAGES_FILE = \"sent_messages.json\"\nEVENTS_FILE = \"calendar_events.json\"\n# Set up basic logging configuration for both console and file output\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n# Load contacts, sent messages, and calendar events\ndef load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "EVENTS_FILE",
        "kind": 5,
        "importPath": "SendWish copy",
        "description": "SendWish copy",
        "peekOfCode": "EVENTS_FILE = \"calendar_events.json\"\n# Set up basic logging configuration for both console and file output\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n# Load contacts, sent messages, and calendar events\ndef load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        raise ContactFileNotFoundError()",
        "detail": "SendWish copy",
        "documentation": {}
    },
    {
        "label": "load_contacts",
        "kind": 2,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "def load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        raise ContactFileNotFoundError()\ndef load_sent_messages():\n    if os.path.exists(SENT_MESSAGES_FILE):\n        with open(SENT_MESSAGES_FILE, \"r\") as file:\n            return json.load(file)",
        "detail": "SendWish",
        "documentation": {}
    },
    {
        "label": "load_sent_messages",
        "kind": 2,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "def load_sent_messages():\n    if os.path.exists(SENT_MESSAGES_FILE):\n        with open(SENT_MESSAGES_FILE, \"r\") as file:\n            return json.load(file)\n    return {}\ndef load_calendar_events():\n    try:\n        with open(EVENTS_FILE, \"r\") as file:\n            events = json.load(file)\n            return events",
        "detail": "SendWish",
        "documentation": {}
    },
    {
        "label": "load_calendar_events",
        "kind": 2,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "def load_calendar_events():\n    try:\n        with open(EVENTS_FILE, \"r\") as file:\n            events = json.load(file)\n            return events\n    except FileNotFoundError:\n        raise EventFileNotFoundError()\ndef send_message(contact_name, event_summary, recipient_phone_number):\n    try:\n        # Check if the contact has a phone number",
        "detail": "SendWish",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "def send_message(contact_name, event_summary, recipient_phone_number):\n    try:\n        # Check if the contact has a phone number\n        if not recipient_phone_number:\n            raise PhoneNumberNotFoundError()\n        body = f\"Hello {contact_name},\\n\\nThis is a reminder for your event: {event_summary}. Don't forget to check your calendar.\\n\\nBest regards,\\nAutomatic Wishing Bot\"\n        # Get the current time (now) in the local timezone (use pytz for time zone handling)\n        timezone = pytz.timezone(\"UTC\")\n        now = datetime.datetime.now(timezone)\n        hour = now.hour",
        "detail": "SendWish",
        "documentation": {}
    },
    {
        "label": "messaging_logic",
        "kind": 2,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "def messaging_logic():\n    try:\n        contacts = load_contacts()\n        if not contacts:\n            raise ContactFileNotFoundError(\"No contacts found.\")\n        sent_messages = load_sent_messages()\n        events = load_calendar_events()\n        if not events:\n            raise EventNotFoundError(\"No events found.\")\n        for event in events:",
        "detail": "SendWish",
        "documentation": {}
    },
    {
        "label": "ERROR_LOG_FILE",
        "kind": 5,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "ERROR_LOG_FILE = \"error_log.json\"\nSENT_MESSAGES_FILE = \"sent_messages.json\"\nEVENTS_FILE = \"calendar_events.json\"\n# Set up basic logging configuration for both console and file output\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n# Load contacts, sent messages, and calendar events\ndef load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)",
        "detail": "SendWish",
        "documentation": {}
    },
    {
        "label": "SENT_MESSAGES_FILE",
        "kind": 5,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "SENT_MESSAGES_FILE = \"sent_messages.json\"\nEVENTS_FILE = \"calendar_events.json\"\n# Set up basic logging configuration for both console and file output\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n# Load contacts, sent messages, and calendar events\ndef load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:",
        "detail": "SendWish",
        "documentation": {}
    },
    {
        "label": "EVENTS_FILE",
        "kind": 5,
        "importPath": "SendWish",
        "description": "SendWish",
        "peekOfCode": "EVENTS_FILE = \"calendar_events.json\"\n# Set up basic logging configuration for both console and file output\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n# Load contacts, sent messages, and calendar events\ndef load_contacts():\n    try:\n        with open(\"contacts.json\", \"r\") as file:\n            return json.load(file)\n    except FileNotFoundError:\n        raise ContactFileNotFoundError()",
        "detail": "SendWish",
        "documentation": {}
    }
]